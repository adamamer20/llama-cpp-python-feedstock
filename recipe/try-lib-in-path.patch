diff --git a/llama_cpp/llama_cpp.py b/llama_cpp/llama_cpp.py
index 4e4c870..b0c1c5e 100644
--- a/llama_cpp/llama_cpp.py
+++ b/llama_cpp/llama_cpp.py
@@ -31,16 +31,21 @@ def _load_shared_library(lib_base_name: str):
     if sys.platform.startswith("linux"):
         _lib_paths += [
             _base_path / f"lib{lib_base_name}.so",
+            f"lib{lib_base_name}.so",
         ]
     elif sys.platform == "darwin":
         _lib_paths += [
             _base_path / f"lib{lib_base_name}.so",
             _base_path / f"lib{lib_base_name}.dylib",
+            f"lib{lib_base_name}.so",
+            f"lib{lib_base_name}.dylib",
         ]
     elif sys.platform == "win32":
         _lib_paths += [
             _base_path / f"{lib_base_name}.dll",
             _base_path / f"lib{lib_base_name}.dll",
+            f"{lib_base_name}.dll",
+            f"lib{lib_base_name}.dll",
         ]
     else:
         raise RuntimeError("Unsupported platform")
@@ -65,14 +70,16 @@ def _load_shared_library(lib_base_name: str):
 
     # Try to load the shared library, handling potential errors
     for _lib_path in _lib_paths:
-        if _lib_path.exists():
+        if isinstance(_lib_path, str) or _lib_path.exists():
             try:
                 return ctypes.CDLL(str(_lib_path), **cdll_args)  # type: ignore
+            except OSError:
+                pass
             except Exception as e:
                 raise RuntimeError(f"Failed to load shared library '{_lib_path}': {e}")
 
     raise FileNotFoundError(
-        f"Shared library with base name '{lib_base_name}' not found"
+        f"Shared library with base name '{lib_base_name}' not found in {_lib_paths}"
     )
 
 
diff --git a/llama_cpp/llava_cpp.py b/llama_cpp/llava_cpp.py
index 72f6a12..68fa351 100644
--- a/llama_cpp/llava_cpp.py
+++ b/llama_cpp/llava_cpp.py
@@ -29,16 +29,21 @@ def _load_shared_library(lib_base_name: str):
     if sys.platform.startswith("linux"):
         _lib_paths += [
             _base_path / f"lib{lib_base_name}.so",
+            f"lib{lib_base_name}.so",
         ]
     elif sys.platform == "darwin":
         _lib_paths += [
             _base_path / f"lib{lib_base_name}.so",
             _base_path / f"lib{lib_base_name}.dylib",
+            f"lib{lib_base_name}.so",
+            f"lib{lib_base_name}.dylib",
         ]
     elif sys.platform == "win32":
         _lib_paths += [
             _base_path / f"{lib_base_name}.dll",
             _base_path / f"lib{lib_base_name}.dll",
+            f"{lib_base_name}.dll",
+            f"lib{lib_base_name}.dll",
         ]
     else:
         raise RuntimeError("Unsupported platform")
@@ -60,14 +65,16 @@ def _load_shared_library(lib_base_name: str):
 
     # Try to load the shared library, handling potential errors
     for _lib_path in _lib_paths:
-        if _lib_path.exists():
+        if isinstance(_lib_path, str) or _lib_path.exists():
             try:
                 return ctypes.CDLL(str(_lib_path), **cdll_args) # type: ignore
+            except OSError:
+                pass
             except Exception as e:
                 raise RuntimeError(f"Failed to load shared library '{_lib_path}': {e}")
 
     raise FileNotFoundError(
-        f"Shared library with base name '{lib_base_name}' not found"
+        f"Shared library with base name '{lib_base_name}' not found in {_lib_paths}"
     )
 
 
